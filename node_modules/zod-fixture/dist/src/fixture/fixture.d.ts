import type { InferZodType, ZodTypeAny } from '../internal/zod';
import type { Defaults } from '../transformer/defaults';
import { ConstrainedTransformer, UnconstrainedTransformer } from '../transformer/transformer';
declare function missingGeneratorError(schema: ZodTypeAny): Error;
export interface ConstrainedFixture extends ConstrainedTransformer {
    fromSchema<TSchema extends ZodTypeAny>(schema: TSchema, instanceDefaults?: Partial<Defaults>): InferZodType<TSchema>;
}
export declare class ConstrainedFixture extends ConstrainedTransformer {
    generators: (import("../transformer/generator").Definition<import("zod").ZodAny> | import("../transformer/generator").Definition<import("zod").ZodArray<ZodTypeAny, "many">> | import("../transformer/generator").Definition<import("zod").ZodBigInt> | import("../transformer/generator").Definition<import("zod").ZodBoolean> | import("../transformer/generator").Definition<import("zod").ZodBranded<ZodTypeAny, PropertyKey>> | import("../transformer/generator").Definition<import("zod").ZodDate> | import("../transformer/generator").Definition<import("zod").ZodDefault<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodEffects<ZodTypeAny, any, any>> | import("../transformer/generator").Definition<import("zod").ZodEnum<[string, ...string[]]>> | import("../transformer/generator").Definition<import("zod").ZodNativeEnum<import("zod").EnumLike>> | import("../transformer/generator").Definition<import("zod").ZodFunction<import("zod").ZodTuple<[], ZodTypeAny>, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodIntersection<ZodTypeAny, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodLazy<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodLiteral<unknown>> | import("../transformer/generator").Definition<import("zod").ZodMap<ZodTypeAny, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodNaN> | import("../transformer/generator").Definition<import("zod").ZodNever> | import("../transformer/generator").Definition<import("zod").ZodNull> | import("../transformer/generator").Definition<import("zod").ZodNullable<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodNumber> | import("../transformer/generator").Definition<import("zod").ZodObject<import("zod").ZodRawShape, import("zod").UnknownKeysParam, ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>> | import("../transformer/generator").Definition<import("zod").ZodRecord<import("zod").ZodString, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodOptional<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodPromise<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodReadonly<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodSet<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodString> | import("../transformer/generator").Definition<import("zod").ZodSymbol> | import("../transformer/generator").Definition<import("zod").ZodTuple<[ZodTypeAny, ...ZodTypeAny[]], null>> | import("../transformer/generator").Definition<import("zod").ZodUndefined> | import("../transformer/generator").Definition<import("zod").ZodVoid> | import("../transformer/generator").Definition<import("zod").ZodUnion<readonly [ZodTypeAny, ...ZodTypeAny[]]>> | import("../transformer/generator").Definition<import("zod").ZodDiscriminatedUnion<string, import("zod").ZodDiscriminatedUnionOption<string>[]>> | import("../transformer/generator").Definition<import("zod").ZodUnknown>)[];
    missingGeneratorError: typeof missingGeneratorError;
}
export interface UnconstrainedFixture extends UnconstrainedTransformer {
    fromSchema<TSchema extends ZodTypeAny>(schema: TSchema, instanceDefaults?: Partial<Defaults>): InferZodType<TSchema>;
}
export declare class UnconstrainedFixture extends UnconstrainedTransformer {
    generators: (import("../transformer/generator").Definition<import("zod").ZodAny> | import("../transformer/generator").Definition<import("zod").ZodArray<ZodTypeAny, "many">> | import("../transformer/generator").Definition<import("zod").ZodBigInt> | import("../transformer/generator").Definition<import("zod").ZodBoolean> | import("../transformer/generator").Definition<import("zod").ZodBranded<ZodTypeAny, PropertyKey>> | import("../transformer/generator").Definition<import("zod").ZodDate> | import("../transformer/generator").Definition<import("zod").ZodDefault<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodEffects<ZodTypeAny, any, any>> | import("../transformer/generator").Definition<import("zod").ZodEnum<[string, ...string[]]>> | import("../transformer/generator").Definition<import("zod").ZodNativeEnum<import("zod").EnumLike>> | import("../transformer/generator").Definition<import("zod").ZodFunction<import("zod").ZodTuple<[], ZodTypeAny>, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodIntersection<ZodTypeAny, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodLazy<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodLiteral<unknown>> | import("../transformer/generator").Definition<import("zod").ZodMap<ZodTypeAny, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodNaN> | import("../transformer/generator").Definition<import("zod").ZodNever> | import("../transformer/generator").Definition<import("zod").ZodNull> | import("../transformer/generator").Definition<import("zod").ZodNullable<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodNumber> | import("../transformer/generator").Definition<import("zod").ZodObject<import("zod").ZodRawShape, import("zod").UnknownKeysParam, ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>> | import("../transformer/generator").Definition<import("zod").ZodRecord<import("zod").ZodString, ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodOptional<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodPromise<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodReadonly<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodSet<ZodTypeAny>> | import("../transformer/generator").Definition<import("zod").ZodString> | import("../transformer/generator").Definition<import("zod").ZodSymbol> | import("../transformer/generator").Definition<import("zod").ZodTuple<[ZodTypeAny, ...ZodTypeAny[]], null>> | import("../transformer/generator").Definition<import("zod").ZodUndefined> | import("../transformer/generator").Definition<import("zod").ZodVoid> | import("../transformer/generator").Definition<import("zod").ZodUnion<readonly [ZodTypeAny, ...ZodTypeAny[]]>> | import("../transformer/generator").Definition<import("zod").ZodDiscriminatedUnion<string, import("zod").ZodDiscriminatedUnionOption<string>[]>> | import("../transformer/generator").Definition<import("zod").ZodUnknown>)[];
    missingGeneratorError: typeof missingGeneratorError;
}
export { ConstrainedFixture as Fixture };
export declare function createFixture<TSchema extends ZodTypeAny>(schema: TSchema, instanceDefaults?: Partial<Defaults>): InferZodType<TSchema>;
