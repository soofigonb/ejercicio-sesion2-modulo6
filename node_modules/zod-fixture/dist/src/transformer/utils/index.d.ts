import type { ZodTypeAny } from '../../internal/zod';
import type { ZodConstructorOrSchema } from '../generator';
import type { Runner } from '../runner';
import { Checks } from './Checks';
import { Randomization } from './Randomization';
export declare class Utils {
    private runner;
    recursion: WeakMap<() => ZodTypeAny, number>;
    random: Randomization;
    constructor(runner: Runner);
    resolveValue<TInitial, TFallback extends NonNullable<TInitial>, TConflict extends NonNullable<TInitial>>(config: {
        initial: TInitial;
        fallback: TFallback;
    } | {
        initial: TInitial;
        fallback: TFallback;
        conflict: TConflict;
        resolve: (config: {
            fallback: TFallback;
            conflict: TConflict;
        }) => NonNullable<TInitial>;
    }): NonNullable<TInitial>;
    n<T>(factory: (index: number) => T, config?: number | {
        min: number;
        max: number;
    }): Array<T>;
    ifNotNever<TSchema extends ZodTypeAny>(schema: TSchema | null | undefined, action: (schema: TSchema) => unknown): void;
    recursionCheck<TSchema extends ZodTypeAny>(schema: TSchema, action: (schema: TSchema) => unknown): void;
    isType<TSchema extends ZodTypeAny>(target: ZodConstructorOrSchema<TSchema>, schema: ZodTypeAny): schema is TSchema;
    checks<TChecks extends {
        kind: string;
    }[]>(checks: TChecks): Checks<TChecks>;
    noop(): void;
}
