import type { Defaults } from '../defaults';
import MersenneTwister from './MersenneTwister';
import { RegExCache } from './RegExCache';
export declare class Randomization {
    private defaults;
    mt: MersenneTwister;
    regExCache: RegExCache;
    regExRandInt: (min: number, max: number) => number;
    constructor(defaults: Defaults);
    uuid(): string;
    unitInterval(): number;
    from<T>(list: T[] | readonly T[] | Set<T> | string): T;
    shuffle<T>(values: T[]): T[];
    emoji(): string;
    string(config: {
        min?: number;
        max?: number;
    }): string;
    float(config?: {
        min?: number;
        max?: number;
    }): number;
    int(config?: {
        min?: number;
        max?: number;
    }): number;
    bigInt(config?: {
        min?: bigint;
        max?: bigint;
    }): bigint;
    lorem(length: number, type?: 'word' | 'sentence' | 'paragraph'): string;
    boolean(): boolean;
    date(config?: {
        min?: number;
        max?: number;
    }): Date;
    cuid(): string;
    cuid2(): string;
    ulid(): string;
    regexp(pattern: string | RegExp): string;
}
