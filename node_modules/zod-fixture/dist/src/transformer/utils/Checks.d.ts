type IfAny<T, Y, N> = 0 extends 1 & T ? Y : N;
export declare class Checks<TChecks extends {
    kind: string;
}[]> {
    private checks;
    constructor(checks: TChecks);
    find<TKind extends string>(kind: TKind): FilterChecks<TChecks[number], TKind> | undefined;
    has<TKind extends string>(kind: TKind): boolean;
}
type FilterChecks<T extends {
    kind: string;
}, TKind extends string> = IfAny<T, unknown, T extends {
    kind: TKind;
} ? T : never>;
export {};
