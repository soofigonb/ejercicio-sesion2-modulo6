import type { ZodTypeAny } from '../internal/zod';
import type { Defaults } from './defaults';
import type { Definition } from './generator';
export declare abstract class Transformer {
    readonly instanceDefaults?: Partial<Defaults> | undefined;
    abstract readonly generators: Definition[];
    abstract readonly transformerDefaults: Defaults;
    constructor(instanceDefaults?: Partial<Defaults> | undefined);
    extend(generators: Definition | Definition[]): this;
    fromSchema<TSchema extends ZodTypeAny>(schema: TSchema, instanceDefaults?: Partial<Defaults>): unknown;
    missingGeneratorError(schema: ZodTypeAny): Error;
}
export declare class ConstrainedTransformer extends Transformer {
    generators: Definition[];
    transformerDefaults: Defaults;
}
export declare class UnconstrainedTransformer extends Transformer {
    generators: Definition[];
    transformerDefaults: Defaults;
}
