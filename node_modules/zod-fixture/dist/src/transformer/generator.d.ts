import type { ZodTypeAny } from '../internal/zod';
import type { Runner } from './runner';
export interface Context {
    path: (string | number)[];
}
export interface ZodConstructor<TSchema extends ZodTypeAny> {
    new (...args: any[]): TSchema;
    create(...args: any[]): TSchema;
}
export type ZodConstructorOrSchema<TSchema extends ZodTypeAny> = TSchema | ZodConstructor<TSchema>;
export declare function isZodConstructor(schema: ZodConstructorOrSchema<ZodTypeAny>): schema is ZodConstructor<ZodTypeAny>;
type Filter<TSchema extends ZodTypeAny = any> = (obj: {
    def: TSchema['_def'];
    schema: TSchema;
    transform: Runner;
    context: Context;
}) => boolean;
export type Generator<TSchema extends ZodTypeAny = any> = (obj: {
    def: TSchema['_def'];
    schema: TSchema;
    transform: Runner;
    context: Context;
}) => unknown;
export interface Definition<TSchema extends ZodTypeAny = any> {
    schema?: ZodConstructorOrSchema<TSchema>;
    filter?: Filter<TSchema>;
    output: Generator<TSchema>;
}
export declare function Generator<TSchema extends ZodTypeAny = any>(definition: Definition<TSchema>): Definition<TSchema>;
export type { Filter };
