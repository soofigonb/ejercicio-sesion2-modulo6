import type { EnumLike, ZodAny as TrueZodAny, ZodArray as TrueZodArray, ZodBigInt as TrueZodBigInt, ZodBoolean as TrueZodBoolean, ZodBranded as TrueZodBranded, ZodCatch as TrueZodCatch, ZodDate as TrueZodDate, ZodDefault as TrueZodDefault, ZodDiscriminatedUnion as TrueZodDiscriminatedUnion, ZodEffects as TrueZodEffects, ZodEnum as TrueZodEnum, ZodFunction as TrueZodFunction, ZodIntersection as TrueZodIntersection, ZodLazy as TrueZodLazy, ZodLiteral as TrueZodLiteral, ZodMap as TrueZodMap, ZodNaN as TrueZodNaN, ZodNativeEnum as TrueZodNativeEnum, ZodNever as TrueZodNever, ZodNull as TrueZodNull, ZodNullable as TrueZodNullable, ZodNumber as TrueZodNumber, ZodObject as TrueZodObject, ZodOptional as TrueZodOptional, ZodPipeline as TrueZodPipeline, ZodPromise as TrueZodPromise, ZodReadonly as TrueZodReadonly, ZodRecord as TrueZodRecord, ZodSet as TrueZodSet, ZodString as TrueZodString, ZodSymbol as TrueZodSymbol, ZodTuple as TrueZodTuple, ZodUndefined as TrueZodUndefined, ZodUnion as TrueZodUnion, ZodUnknown as TrueZodUnknown, ZodVoid as TrueZodVoid, ZodDiscriminatedUnionOption, ZodRawShape, ZodStringDef, ZodTypeAny } from 'zod';
import type { ZodConstructor } from '../transformer/generator';
export declare const ZodString: ZodConstructor<TrueZodString>;
export declare const ZodNumber: ZodConstructor<TrueZodNumber>;
export declare const ZodNaN: ZodConstructor<TrueZodNaN>;
export declare const ZodBigInt: ZodConstructor<TrueZodBigInt>;
export declare const ZodBoolean: ZodConstructor<TrueZodBoolean>;
export declare const ZodDate: ZodConstructor<TrueZodDate>;
export declare const ZodSymbol: ZodConstructor<TrueZodSymbol>;
export declare const ZodUndefined: ZodConstructor<TrueZodUndefined>;
export declare const ZodNull: ZodConstructor<TrueZodNull>;
export declare const ZodAny: ZodConstructor<TrueZodAny>;
export declare const ZodUnknown: ZodConstructor<TrueZodUnknown>;
export declare const ZodNever: ZodConstructor<TrueZodNever>;
export declare const ZodVoid: ZodConstructor<TrueZodVoid>;
export declare const ZodArray: ZodConstructor<TrueZodArray<ZodTypeAny, "many">>;
export declare const ZodObject: ZodConstructor<TrueZodObject<ZodRawShape, import("zod").UnknownKeysParam, ZodTypeAny, {
    [x: string]: any;
}, {
    [x: string]: any;
}>>;
export declare const ZodUnion: ZodConstructor<TrueZodUnion<readonly [ZodTypeAny, ...ZodTypeAny[]]>>;
export declare const ZodDiscriminatedUnion: ZodConstructor<TrueZodDiscriminatedUnion<string, ZodDiscriminatedUnionOption<string>[]>>;
export declare const ZodIntersection: ZodConstructor<TrueZodIntersection<ZodTypeAny, ZodTypeAny>>;
export declare const ZodTuple: ZodConstructor<TrueZodTuple<[ZodTypeAny, ...ZodTypeAny[]], null>>;
export declare const ZodRecord: ZodConstructor<TrueZodRecord<TrueZodString, ZodTypeAny>>;
export declare const ZodMap: ZodConstructor<TrueZodMap<ZodTypeAny, ZodTypeAny>>;
export declare const ZodSet: ZodConstructor<TrueZodSet<ZodTypeAny>>;
export declare const ZodFunction: ZodConstructor<TrueZodFunction<TrueZodTuple<[], ZodTypeAny>, ZodTypeAny>>;
export declare const ZodLazy: ZodConstructor<TrueZodLazy<ZodTypeAny>>;
export declare const ZodLiteral: ZodConstructor<TrueZodLiteral<unknown>>;
export declare const ZodEnum: ZodConstructor<TrueZodEnum<[string, ...string[]]>>;
export declare const ZodEffects: ZodConstructor<TrueZodEffects<ZodTypeAny, any, any>>;
export declare const ZodNativeEnum: ZodConstructor<TrueZodNativeEnum<EnumLike>>;
export declare const ZodOptional: ZodConstructor<TrueZodOptional<ZodTypeAny>>;
export declare const ZodNullable: ZodConstructor<TrueZodNullable<ZodTypeAny>>;
export declare const ZodDefault: ZodConstructor<TrueZodDefault<ZodTypeAny>>;
export declare const ZodCatch: ZodConstructor<TrueZodCatch<ZodTypeAny>>;
export declare const ZodPromise: ZodConstructor<TrueZodPromise<ZodTypeAny>>;
export declare const ZodBranded: ZodConstructor<TrueZodBranded<ZodTypeAny, PropertyKey>>;
export declare const ZodPipeline: ZodConstructor<TrueZodPipeline<ZodTypeAny, ZodTypeAny>>;
export declare const ZodReadonly: ZodConstructor<TrueZodReadonly<ZodTypeAny>>;
export declare enum ZodParsedType {
    function = "function",
    number = "number",
    string = "string",
    nan = "nan",
    integer = "integer",
    float = "float",
    boolean = "boolean",
    date = "date",
    bigint = "bigint",
    symbol = "symbol",
    undefined = "undefined",
    null = "null",
    array = "array",
    object = "object",
    unknown = "unknown",
    promise = "promise",
    void = "void",
    never = "never",
    map = "map",
    set = "set"
}
export declare const getParsedType: (data: any) => ZodParsedType;
export declare const util: {
    objectKeys: (obj: any) => string[];
};
export type InferZodType<T extends {
    _output: unknown;
}> = T['_output'];
export type { ZodStringDef, ZodTypeAny };
